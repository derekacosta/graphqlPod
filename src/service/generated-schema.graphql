type AggregateChat {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateS3Object {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Chat {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String!
  author: User
}

type ChatConnection {
  pageInfo: PageInfo!
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  id: ID
  message: String!
  author: UserCreateOneInput
}

type ChatEdge {
  node: Chat!
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  message_ASC
  message_DESC
}

type ChatPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String!
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
  AND: [ChatSubscriptionWhereInput!]
}

input ChatUpdateInput {
  message: String
  author: UserUpdateOneInput
}

input ChatUpdateManyMutationInput {
  message: String
}

input ChatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  author: UserWhereInput
  AND: [ChatWhereInput!]
}

input ChatWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  text: String!
  author: String!
  votes: Int
  post: Post!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  author: String!
  votes: Int
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  author: String!
  votes: Int
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  author_ASC
  author_DESC
  votes_ASC
  votes_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  author: String!
  votes: Int
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  votes: Int
  votes_not: Int
  votes_in: [Int!]
  votes_not_in: [Int!]
  votes_lt: Int
  votes_lte: Int
  votes_gt: Int
  votes_gte: Int
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  author: String
  votes: Int
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
  author: String
  votes: Int
}

input CommentUpdateManyMutationInput {
  text: String
  author: String
  votes: Int
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutPostDataInput {
  text: String
  author: String
  votes: Int
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  votes: Int
  votes_not: Int
  votes_in: [Int!]
  votes_not_in: [Int!]
  votes_lt: Int
  votes_lte: Int
  votes_gt: Int
  votes_gte: Int
  post: PostWhereInput
  AND: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createChat(data: ChatCreateInput!): Chat!
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  updateManyChats(
    data: ChatUpdateManyMutationInput!
    where: ChatWhereInput
  ): BatchPayload!
  upsertChat(
    where: ChatWhereUniqueInput!
    create: ChatCreateInput!
    update: ChatUpdateInput!
  ): Chat!
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteManyChats(where: ChatWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(
    data: CommentUpdateInput!
    where: CommentWhereUniqueInput!
  ): Comment
  updateManyComments(
    data: CommentUpdateManyMutationInput!
    where: CommentWhereInput
  ): BatchPayload!
  upsertComment(
    where: CommentWhereUniqueInput!
    create: CommentCreateInput!
    update: CommentUpdateInput!
  ): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(
    data: PostUpdateManyMutationInput!
    where: PostWhereInput
  ): BatchPayload!
  upsertPost(
    where: PostWhereUniqueInput!
    create: PostCreateInput!
    update: PostUpdateInput!
  ): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createS3Object(data: S3ObjectCreateInput!): S3Object!
  updateS3Object(
    data: S3ObjectUpdateInput!
    where: S3ObjectWhereUniqueInput!
  ): S3Object
  updateManyS3Objects(
    data: S3ObjectUpdateManyMutationInput!
    where: S3ObjectWhereInput
  ): BatchPayload!
  upsertS3Object(
    where: S3ObjectWhereUniqueInput!
    create: S3ObjectCreateInput!
    update: S3ObjectUpdateInput!
  ): S3Object!
  deleteS3Object(where: S3ObjectWhereUniqueInput!): S3Object
  deleteManyS3Objects(where: S3ObjectWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateManyVotes(
    data: VoteUpdateManyMutationInput!
    where: VoteWhereInput
  ): BatchPayload!
  upsertVote(
    where: VoteWhereUniqueInput!
    create: VoteCreateInput!
    update: VoteUpdateInput!
  ): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
  nameFile: String!
  author: User
  postContent: String
  postImage: S3Object
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment!]
  votes: Int
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  isPublished: Boolean
  title: String!
  text: String!
  nameFile: String!
  author: UserCreateOneWithoutPostsInput
  postContent: String
  postImage: S3ObjectCreateOneInput
  comments: CommentCreateManyWithoutPostInput
  votes: Int
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  isPublished: Boolean
  title: String!
  text: String!
  nameFile: String!
  postContent: String
  postImage: S3ObjectCreateOneInput
  comments: CommentCreateManyWithoutPostInput
  votes: Int
}

input PostCreateWithoutCommentsInput {
  id: ID
  isPublished: Boolean
  title: String!
  text: String!
  nameFile: String!
  author: UserCreateOneWithoutPostsInput
  postContent: String
  postImage: S3ObjectCreateOneInput
  votes: Int
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  nameFile_ASC
  nameFile_DESC
  postContent_ASC
  postContent_DESC
  votes_ASC
  votes_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
  nameFile: String!
  postContent: String
  votes: Int
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  nameFile: String
  nameFile_not: String
  nameFile_in: [String!]
  nameFile_not_in: [String!]
  nameFile_lt: String
  nameFile_lte: String
  nameFile_gt: String
  nameFile_gte: String
  nameFile_contains: String
  nameFile_not_contains: String
  nameFile_starts_with: String
  nameFile_not_starts_with: String
  nameFile_ends_with: String
  nameFile_not_ends_with: String
  postContent: String
  postContent_not: String
  postContent_in: [String!]
  postContent_not_in: [String!]
  postContent_lt: String
  postContent_lte: String
  postContent_gt: String
  postContent_gte: String
  postContent_contains: String
  postContent_not_contains: String
  postContent_starts_with: String
  postContent_not_starts_with: String
  postContent_ends_with: String
  postContent_not_ends_with: String
  votes: Int
  votes_not: Int
  votes_in: [Int!]
  votes_not_in: [Int!]
  votes_lt: Int
  votes_lte: Int
  votes_gt: Int
  votes_gte: Int
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  author: UserUpdateOneWithoutPostsInput
  postContent: String
  postImage: S3ObjectUpdateOneInput
  comments: CommentUpdateManyWithoutPostInput
  votes: Int
}

input PostUpdateManyDataInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  postContent: String
  votes: Int
}

input PostUpdateManyMutationInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  postContent: String
  votes: Int
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  postContent: String
  postImage: S3ObjectUpdateOneInput
  comments: CommentUpdateManyWithoutPostInput
  votes: Int
}

input PostUpdateWithoutCommentsDataInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  author: UserUpdateOneWithoutPostsInput
  postContent: String
  postImage: S3ObjectUpdateOneInput
  votes: Int
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  nameFile: String
  nameFile_not: String
  nameFile_in: [String!]
  nameFile_not_in: [String!]
  nameFile_lt: String
  nameFile_lte: String
  nameFile_gt: String
  nameFile_gte: String
  nameFile_contains: String
  nameFile_not_contains: String
  nameFile_starts_with: String
  nameFile_not_starts_with: String
  nameFile_ends_with: String
  nameFile_not_ends_with: String
  author: UserWhereInput
  postContent: String
  postContent_not: String
  postContent_in: [String!]
  postContent_not_in: [String!]
  postContent_lt: String
  postContent_lte: String
  postContent_gt: String
  postContent_gte: String
  postContent_contains: String
  postContent_not_contains: String
  postContent_starts_with: String
  postContent_not_starts_with: String
  postContent_ends_with: String
  postContent_not_ends_with: String
  postImage: S3ObjectWhereInput
  comments_some: CommentWhereInput
  votes: Int
  votes_not: Int
  votes_in: [Int!]
  votes_not_in: [Int!]
  votes_lt: Int
  votes_lte: Int
  votes_gt: Int
  votes_gte: Int
  AND: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  chat(where: ChatWhereUniqueInput!): Chat
  chats(
    where: ChatWhereInput
    orderBy: ChatOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Chat]!
  chatsConnection(
    where: ChatWhereInput
    orderBy: ChatOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ChatConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment]!
  commentsConnection(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CommentConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post]!
  postsConnection(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PostConnection!
  s3Object(where: S3ObjectWhereUniqueInput!): S3Object
  s3Objects(
    where: S3ObjectWhereInput
    orderBy: S3ObjectOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [S3Object]!
  s3ObjectsConnection(
    where: S3ObjectWhereInput
    orderBy: S3ObjectOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): S3ObjectConnection!
  user(where: UserWhereUniqueInput!): User
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(
    where: VoteWhereInput
    orderBy: VoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Vote]!
  votesConnection(
    where: VoteWhereInput
    orderBy: VoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): VoteConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  CUSTOMER
}

type S3Object {
  id: ID!
  bucket: String!
  region: String!
  key: String!
}

type S3ObjectConnection {
  pageInfo: PageInfo!
  edges: [S3ObjectEdge]!
  aggregate: AggregateS3Object!
}

input S3ObjectCreateInput {
  id: ID
  bucket: String!
  region: String!
  key: String!
}

input S3ObjectCreateOneInput {
  create: S3ObjectCreateInput
  connect: S3ObjectWhereUniqueInput
}

type S3ObjectEdge {
  node: S3Object!
  cursor: String!
}

enum S3ObjectOrderByInput {
  id_ASC
  id_DESC
  bucket_ASC
  bucket_DESC
  region_ASC
  region_DESC
  key_ASC
  key_DESC
}

type S3ObjectPreviousValues {
  id: ID!
  bucket: String!
  region: String!
  key: String!
}

type S3ObjectSubscriptionPayload {
  mutation: MutationType!
  node: S3Object
  updatedFields: [String!]
  previousValues: S3ObjectPreviousValues
}

input S3ObjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: S3ObjectWhereInput
  AND: [S3ObjectSubscriptionWhereInput!]
}

input S3ObjectUpdateDataInput {
  bucket: String
  region: String
  key: String
}

input S3ObjectUpdateInput {
  bucket: String
  region: String
  key: String
}

input S3ObjectUpdateManyMutationInput {
  bucket: String
  region: String
  key: String
}

input S3ObjectUpdateOneInput {
  create: S3ObjectCreateInput
  update: S3ObjectUpdateDataInput
  upsert: S3ObjectUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: S3ObjectWhereUniqueInput
}

input S3ObjectUpsertNestedInput {
  update: S3ObjectUpdateDataInput!
  create: S3ObjectCreateInput!
}

input S3ObjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  bucket: String
  bucket_not: String
  bucket_in: [String!]
  bucket_not_in: [String!]
  bucket_lt: String
  bucket_lte: String
  bucket_gt: String
  bucket_gte: String
  bucket_contains: String
  bucket_not_contains: String
  bucket_starts_with: String
  bucket_not_starts_with: String
  bucket_ends_with: String
  bucket_not_ends_with: String
  region: String
  region_not: String
  region_in: [String!]
  region_not_in: [String!]
  region_lt: String
  region_lte: String
  region_gt: String
  region_gte: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  AND: [S3ObjectWhereInput!]
}

input S3ObjectWhereUniqueInput {
  id: ID
}

type Subscription {
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  s3Object(where: S3ObjectSubscriptionWhereInput): S3ObjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  emailvalidated: Boolean!
  validateEmailToken: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  posts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post!]
  role: Role!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  emailvalidated: Boolean
  validateEmailToken: String!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  posts: PostCreateManyWithoutAuthorInput
  role: Role
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: ID
  email: String!
  emailvalidated: Boolean
  validateEmailToken: String!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  role: Role
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  emailvalidated_ASC
  emailvalidated_DESC
  validateEmailToken_ASC
  validateEmailToken_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  password_ASC
  password_DESC
  nameFile_ASC
  nameFile_DESC
  resetPasswordToken_ASC
  resetPasswordToken_DESC
  resetPasswordExpires_ASC
  resetPasswordExpires_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  emailvalidated: Boolean!
  validateEmailToken: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  posts: PostUpdateManyWithoutAuthorInput
  role: Role
}

input UserUpdateInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  posts: PostUpdateManyWithoutAuthorInput
  role: Role
}

input UserUpdateManyMutationInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  role: Role
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  role: Role
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  emailvalidated: Boolean
  emailvalidated_not: Boolean
  validateEmailToken: String
  validateEmailToken_not: String
  validateEmailToken_in: [String!]
  validateEmailToken_not_in: [String!]
  validateEmailToken_lt: String
  validateEmailToken_lte: String
  validateEmailToken_gt: String
  validateEmailToken_gte: String
  validateEmailToken_contains: String
  validateEmailToken_not_contains: String
  validateEmailToken_starts_with: String
  validateEmailToken_not_starts_with: String
  validateEmailToken_ends_with: String
  validateEmailToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  nameFile: String
  nameFile_not: String
  nameFile_in: [String!]
  nameFile_not_in: [String!]
  nameFile_lt: String
  nameFile_lte: String
  nameFile_gt: String
  nameFile_gte: String
  nameFile_contains: String
  nameFile_not_contains: String
  nameFile_starts_with: String
  nameFile_not_starts_with: String
  nameFile_ends_with: String
  nameFile_not_ends_with: String
  resetPasswordToken: String
  resetPasswordToken_not: String
  resetPasswordToken_in: [String!]
  resetPasswordToken_not_in: [String!]
  resetPasswordToken_lt: String
  resetPasswordToken_lte: String
  resetPasswordToken_gt: String
  resetPasswordToken_gte: String
  resetPasswordToken_contains: String
  resetPasswordToken_not_contains: String
  resetPasswordToken_starts_with: String
  resetPasswordToken_not_starts_with: String
  resetPasswordToken_ends_with: String
  resetPasswordToken_not_ends_with: String
  resetPasswordExpires: Float
  resetPasswordExpires_not: Float
  resetPasswordExpires_in: [Float!]
  resetPasswordExpires_not_in: [Float!]
  resetPasswordExpires_lt: Float
  resetPasswordExpires_lte: Float
  resetPasswordExpires_gt: Float
  resetPasswordExpires_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_some: PostWhereInput
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  validateEmailToken: String
  resetPasswordToken: String
}

type Vote {
  id: ID!
  postId: ID!
  createdBy: ID!
  createdAt: DateTime!
  vote: VoteType
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  postId: ID
  createdBy: ID
  vote: VoteType
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  postId_ASC
  postId_DESC
  createdBy_ASC
  createdBy_DESC
  createdAt_ASC
  createdAt_DESC
  vote_ASC
  vote_DESC
}

type VotePreviousValues {
  id: ID!
  postId: ID!
  createdBy: ID!
  createdAt: DateTime!
  vote: VoteType
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
}

enum VoteType {
  UP
  DOWN
}

input VoteUpdateInput {
  vote: VoteType
}

input VoteUpdateManyMutationInput {
  vote: VoteType
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  postId: ID
  postId_not: ID
  postId_in: [ID!]
  postId_not_in: [ID!]
  postId_lt: ID
  postId_lte: ID
  postId_gt: ID
  postId_gte: ID
  postId_contains: ID
  postId_not_contains: ID
  postId_starts_with: ID
  postId_not_starts_with: ID
  postId_ends_with: ID
  postId_not_ends_with: ID
  createdBy: ID
  createdBy_not: ID
  createdBy_in: [ID!]
  createdBy_not_in: [ID!]
  createdBy_lt: ID
  createdBy_lte: ID
  createdBy_gt: ID
  createdBy_gte: ID
  createdBy_contains: ID
  createdBy_not_contains: ID
  createdBy_starts_with: ID
  createdBy_not_starts_with: ID
  createdBy_ends_with: ID
  createdBy_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  vote: VoteType
  vote_not: VoteType
  vote_in: [VoteType!]
  vote_not_in: [VoteType!]
  AND: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
  postId: ID
  createdBy: ID
}
