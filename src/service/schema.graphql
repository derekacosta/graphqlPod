# import User, Query.usersConnection, Query.user, Mutation.updateUser, Mutation.createUser from "./generated-schema.graphql"
# import Car, CarCreateInput, CarWhereInput, CarOrderByInput from "./generated-schema.graphql"
# import Query.car, Mutation.deleteCar, Query.carsConnection from "./generated-schema.graphql"
# import Mutation.createPost, Post from "./generated-schema.graphql"
# import Mutation.createChat, Query.chatsConnection, Query.chat from "./generated-schema.graphql"

type Subscription {
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
}

type Query {
  me: User
  feed: [Post!]!
  drafts(
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post!]!
  post(id: ID!): Post
}

type Mutation {
  signup(
    email: String!
    password: String!
    name: String!
    nameFile: String!
  ): AuthPayload!
  resetPassword(password: String!, resetPasswordToken: String!): AuthPayload!
  sendLinkValidateEmail: User!
  validateEmail(validateEmailToken: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  deletePost(id: ID!): Post
  deleteUser(id: ID!): User
  publish(id: ID!): Post
  updatePassword(oldPassword: String, newPassword: String!): User!
  forgetPassword(email: String!): User!
}

type AuthPayload {
  token: String!
  user: User!
}
